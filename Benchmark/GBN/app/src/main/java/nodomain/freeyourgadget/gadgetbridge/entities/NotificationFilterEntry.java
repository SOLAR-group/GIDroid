package nodomain.freeyourgadget.gadgetbridge.entities;

import nodomain.freeyourgadget.gadgetbridge.entities.DaoSession;
import de.greenrobot.dao.DaoException;

import de.greenrobot.dao.AbstractDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "NOTIFICATION_FILTER_ENTRY".
 */
public class NotificationFilterEntry {

    private Long id;
    private long notificationFilterId;
    /** Not-null value. */
    private String notificationFilterContent;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient NotificationFilterEntryDao myDao;

    private NotificationFilter notificationFilter;
    private Long notificationFilter__resolvedKey;


    public NotificationFilterEntry() {
    }

    public NotificationFilterEntry(Long id) {
        this.id = id;
    }

    public NotificationFilterEntry(Long id, long notificationFilterId, String notificationFilterContent) {
        this.id = id;
        this.notificationFilterId = notificationFilterId;
        this.notificationFilterContent = notificationFilterContent;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getNotificationFilterEntryDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public long getNotificationFilterId() {
        return notificationFilterId;
    }

    public void setNotificationFilterId(long notificationFilterId) {
        this.notificationFilterId = notificationFilterId;
    }

    /** Not-null value. */
    public String getNotificationFilterContent() {
        return notificationFilterContent;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setNotificationFilterContent(String notificationFilterContent) {
        this.notificationFilterContent = notificationFilterContent;
    }

    /** To-one relationship, resolved on first access. */
    public NotificationFilter getNotificationFilter() {
        long __key = this.notificationFilterId;
        if (notificationFilter__resolvedKey == null || !notificationFilter__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            NotificationFilterDao targetDao = daoSession.getNotificationFilterDao();
            NotificationFilter notificationFilterNew = targetDao.load(__key);
            synchronized (this) {
                notificationFilter = notificationFilterNew;
            	notificationFilter__resolvedKey = __key;
            }
        }
        return notificationFilter;
    }

    public void setNotificationFilter(NotificationFilter notificationFilter) {
        if (notificationFilter == null) {
            throw new DaoException("To-one property 'notificationFilterId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.notificationFilter = notificationFilter;
            notificationFilterId = notificationFilter.getId();
            notificationFilter__resolvedKey = notificationFilterId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
