package nodomain.freeyourgadget.gadgetbridge.entities;
import android.os.Build;
import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import nodomain.freeyourgadget.gadgetbridge.entities.Reminder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "REMINDER".
*/
public class ReminderDao extends AbstractDao<Reminder, String> {

    public static final String TABLENAME = "REMINDER";

    /**
     * Properties of entity Reminder.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property DeviceId = new Property(0, long.class, "deviceId", false, "DEVICE_ID");
        public final static Property UserId = new Property(1, long.class, "userId", false, "USER_ID");
        public final static Property ReminderId = new Property(2, String.class, "reminderId", true, "REMINDER_ID");
        public final static Property Message = new Property(3, String.class, "message", false, "MESSAGE");
        public final static Property Date = new Property(4, java.util.Date.class, "date", false, "DATE");
        public final static Property Repetition = new Property(5, int.class, "repetition", false, "REPETITION");
    };

    private DaoSession daoSession;


    public ReminderDao(DaoConfig config) {
        super(config);
    }
    
    public ReminderDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"REMINDER\" (" + //
                "\"DEVICE_ID\" INTEGER NOT NULL ," + // 0: deviceId
                "\"USER_ID\" INTEGER NOT NULL ," + // 1: userId
                "\"REMINDER_ID\" TEXT PRIMARY KEY NOT NULL ," + // 2: reminderId
                "\"MESSAGE\" TEXT NOT NULL ," + // 3: message
                "\"DATE\" INTEGER NOT NULL ," + // 4: date
                "\"REPETITION\" INTEGER NOT NULL );"); // 5: repetition
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_REMINDER_DEVICE_ID_USER_ID_REMINDER_ID ON REMINDER" +
                " (\"DEVICE_ID\",\"USER_ID\",\"REMINDER_ID\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"REMINDER\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Reminder entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getDeviceId());
        stmt.bindLong(2, entity.getUserId());
        stmt.bindString(3, entity.getReminderId());
        stmt.bindString(4, entity.getMessage());
        stmt.bindLong(5, entity.getDate().getTime());
        stmt.bindLong(6, entity.getRepetition());
    }

    @Override
    protected void attachEntity(Reminder entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 2);
    }    

    /** @inheritdoc */
    @Override
    public Reminder readEntity(Cursor cursor, int offset) {
        Reminder entity = new Reminder( //
            cursor.getLong(offset + 0), // deviceId
            cursor.getLong(offset + 1), // userId
            cursor.getString(offset + 2), // reminderId
            cursor.getString(offset + 3), // message
            new java.util.Date(cursor.getLong(offset + 4)), // date
            cursor.getInt(offset + 5) // repetition
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Reminder entity, int offset) {
        entity.setDeviceId(cursor.getLong(offset + 0));
        entity.setUserId(cursor.getLong(offset + 1));
        entity.setReminderId(cursor.getString(offset + 2));
        entity.setMessage(cursor.getString(offset + 3));
        entity.setDate(new java.util.Date(cursor.getLong(offset + 4)));
        entity.setRepetition(cursor.getInt(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(Reminder entity, long rowId) {
        return entity.getReminderId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(Reminder entity) {
        if(entity != null) {
            return entity.getReminderId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getUserDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getDeviceDao().getAllColumns());
            builder.append(" FROM REMINDER T");
            builder.append(" LEFT JOIN USER T0 ON T.\"USER_ID\"=T0.\"_id\"");
            builder.append(" LEFT JOIN DEVICE T1 ON T.\"DEVICE_ID\"=T1.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Reminder loadCurrentDeep(Cursor cursor, boolean lock) {
        Reminder entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        User user = loadCurrentOther(daoSession.getUserDao(), cursor, offset);
         if(user != null) {
            entity.setUser(user);
        }
        offset += daoSession.getUserDao().getAllColumns().length;

        Device device = loadCurrentOther(daoSession.getDeviceDao(), cursor, offset);
         if(device != null) {
            entity.setDevice(device);
        }

        return entity;    
    }

    public Reminder loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Reminder> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Reminder> list = new ArrayList<Reminder>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Reminder> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Reminder> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
