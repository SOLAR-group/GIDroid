// Generated by view binder compiler. Do not edit!
package acr.browser.lightning.databinding;

import acr.browser.lightning.R;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.FrameLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.Toolbar;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.anthonycr.progress.AnimatedProgressBar;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ToolbarBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final AnimatedProgressBar progressView;

  @NonNull
  public final FrameLayout tabsToolbarContainer;

  @NonNull
  public final Toolbar toolbar;

  @NonNull
  public final ConstraintLayout toolbarLayout;

  private ToolbarBinding(@NonNull ConstraintLayout rootView,
      @NonNull AnimatedProgressBar progressView, @NonNull FrameLayout tabsToolbarContainer,
      @NonNull Toolbar toolbar, @NonNull ConstraintLayout toolbarLayout) {
    this.rootView = rootView;
    this.progressView = progressView;
    this.tabsToolbarContainer = tabsToolbarContainer;
    this.toolbar = toolbar;
    this.toolbarLayout = toolbarLayout;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ToolbarBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ToolbarBinding inflate(@NonNull LayoutInflater inflater, @Nullable ViewGroup parent,
      boolean attachToParent) {
    View root = inflater.inflate(R.layout.toolbar, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ToolbarBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.progress_view;
      AnimatedProgressBar progressView = ViewBindings.findChildViewById(rootView, id);
      if (progressView == null) {
        break missingId;
      }

      id = R.id.tabs_toolbar_container;
      FrameLayout tabsToolbarContainer = ViewBindings.findChildViewById(rootView, id);
      if (tabsToolbarContainer == null) {
        break missingId;
      }

      id = R.id.toolbar;
      Toolbar toolbar = ViewBindings.findChildViewById(rootView, id);
      if (toolbar == null) {
        break missingId;
      }

      ConstraintLayout toolbarLayout = (ConstraintLayout) rootView;

      return new ToolbarBinding((ConstraintLayout) rootView, progressView, tabsToolbarContainer,
          toolbar, toolbarLayout);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
