// Generated by view binder compiler. Do not edit!
package acr.browser.lightning.databinding;

import acr.browser.lightning.R;
import acr.browser.lightning.icon.TabCountView;
import acr.browser.lightning.search.SearchView;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.FrameLayout;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.Toolbar;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.drawerlayout.widget.DrawerLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.anthonycr.progress.AnimatedProgressBar;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class BrowserActivityBinding implements ViewBinding {
  @NonNull
  private final CoordinatorLayout rootView;

  @NonNull
  public final ImageView actionAddBookmark;

  @NonNull
  public final ImageView actionBack;

  @NonNull
  public final ImageView actionForward;

  @NonNull
  public final ImageView actionHome;

  @NonNull
  public final ImageView actionPageTools;

  @NonNull
  public final ImageView actionReading;

  @NonNull
  public final ImageView bookmarkBackButton;

  @NonNull
  public final LinearLayout bookmarkDrawer;

  @NonNull
  public final RecyclerView bookmarkListView;

  @NonNull
  public final LinearLayout bookmarkTitleLayout;

  @NonNull
  public final FrameLayout contentFrame;

  @NonNull
  public final CoordinatorLayout coordinatorLayout;

  @NonNull
  public final RecyclerView desktopTabsList;

  @NonNull
  public final DrawerLayout drawerLayout;

  @NonNull
  public final RecyclerView drawerTabsList;

  @NonNull
  public final LinearLayout findBar;

  @NonNull
  public final ImageButton findNext;

  @NonNull
  public final ImageButton findPrevious;

  @NonNull
  public final TextView findQuery;

  @NonNull
  public final ImageButton findQuit;

  @NonNull
  public final FrameLayout homeButton;

  @NonNull
  public final ImageView homeImageView;

  @NonNull
  public final ImageView newTabButton;

  @NonNull
  public final AnimatedProgressBar progressView;

  @NonNull
  public final SearchView search;

  @NonNull
  public final ConstraintLayout searchContainer;

  @NonNull
  public final ImageView searchRefresh;

  @NonNull
  public final ImageView searchSslStatus;

  @NonNull
  public final TabCountView tabCountView;

  @NonNull
  public final LinearLayout tabDrawer;

  @NonNull
  public final ImageView tabHeaderButton;

  @NonNull
  public final Toolbar toolbar;

  @NonNull
  public final ConstraintLayout toolbarLayout;

  @NonNull
  public final LinearLayout uiLayout;

  private BrowserActivityBinding(@NonNull CoordinatorLayout rootView,
      @NonNull ImageView actionAddBookmark, @NonNull ImageView actionBack,
      @NonNull ImageView actionForward, @NonNull ImageView actionHome,
      @NonNull ImageView actionPageTools, @NonNull ImageView actionReading,
      @NonNull ImageView bookmarkBackButton, @NonNull LinearLayout bookmarkDrawer,
      @NonNull RecyclerView bookmarkListView, @NonNull LinearLayout bookmarkTitleLayout,
      @NonNull FrameLayout contentFrame, @NonNull CoordinatorLayout coordinatorLayout,
      @NonNull RecyclerView desktopTabsList, @NonNull DrawerLayout drawerLayout,
      @NonNull RecyclerView drawerTabsList, @NonNull LinearLayout findBar,
      @NonNull ImageButton findNext, @NonNull ImageButton findPrevious, @NonNull TextView findQuery,
      @NonNull ImageButton findQuit, @NonNull FrameLayout homeButton,
      @NonNull ImageView homeImageView, @NonNull ImageView newTabButton,
      @NonNull AnimatedProgressBar progressView, @NonNull SearchView search,
      @NonNull ConstraintLayout searchContainer, @NonNull ImageView searchRefresh,
      @NonNull ImageView searchSslStatus, @NonNull TabCountView tabCountView,
      @NonNull LinearLayout tabDrawer, @NonNull ImageView tabHeaderButton, @NonNull Toolbar toolbar,
      @NonNull ConstraintLayout toolbarLayout, @NonNull LinearLayout uiLayout) {
    this.rootView = rootView;
    this.actionAddBookmark = actionAddBookmark;
    this.actionBack = actionBack;
    this.actionForward = actionForward;
    this.actionHome = actionHome;
    this.actionPageTools = actionPageTools;
    this.actionReading = actionReading;
    this.bookmarkBackButton = bookmarkBackButton;
    this.bookmarkDrawer = bookmarkDrawer;
    this.bookmarkListView = bookmarkListView;
    this.bookmarkTitleLayout = bookmarkTitleLayout;
    this.contentFrame = contentFrame;
    this.coordinatorLayout = coordinatorLayout;
    this.desktopTabsList = desktopTabsList;
    this.drawerLayout = drawerLayout;
    this.drawerTabsList = drawerTabsList;
    this.findBar = findBar;
    this.findNext = findNext;
    this.findPrevious = findPrevious;
    this.findQuery = findQuery;
    this.findQuit = findQuit;
    this.homeButton = homeButton;
    this.homeImageView = homeImageView;
    this.newTabButton = newTabButton;
    this.progressView = progressView;
    this.search = search;
    this.searchContainer = searchContainer;
    this.searchRefresh = searchRefresh;
    this.searchSslStatus = searchSslStatus;
    this.tabCountView = tabCountView;
    this.tabDrawer = tabDrawer;
    this.tabHeaderButton = tabHeaderButton;
    this.toolbar = toolbar;
    this.toolbarLayout = toolbarLayout;
    this.uiLayout = uiLayout;
  }

  @Override
  @NonNull
  public CoordinatorLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static BrowserActivityBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static BrowserActivityBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.browser_activity, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static BrowserActivityBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.action_add_bookmark;
      ImageView actionAddBookmark = ViewBindings.findChildViewById(rootView, id);
      if (actionAddBookmark == null) {
        break missingId;
      }

      id = R.id.action_back;
      ImageView actionBack = ViewBindings.findChildViewById(rootView, id);
      if (actionBack == null) {
        break missingId;
      }

      id = R.id.action_forward;
      ImageView actionForward = ViewBindings.findChildViewById(rootView, id);
      if (actionForward == null) {
        break missingId;
      }

      id = R.id.action_home;
      ImageView actionHome = ViewBindings.findChildViewById(rootView, id);
      if (actionHome == null) {
        break missingId;
      }

      id = R.id.action_page_tools;
      ImageView actionPageTools = ViewBindings.findChildViewById(rootView, id);
      if (actionPageTools == null) {
        break missingId;
      }

      id = R.id.action_reading;
      ImageView actionReading = ViewBindings.findChildViewById(rootView, id);
      if (actionReading == null) {
        break missingId;
      }

      id = R.id.bookmark_back_button;
      ImageView bookmarkBackButton = ViewBindings.findChildViewById(rootView, id);
      if (bookmarkBackButton == null) {
        break missingId;
      }

      id = R.id.bookmark_drawer;
      LinearLayout bookmarkDrawer = ViewBindings.findChildViewById(rootView, id);
      if (bookmarkDrawer == null) {
        break missingId;
      }

      id = R.id.bookmark_list_view;
      RecyclerView bookmarkListView = ViewBindings.findChildViewById(rootView, id);
      if (bookmarkListView == null) {
        break missingId;
      }

      id = R.id.bookmark_title_layout;
      LinearLayout bookmarkTitleLayout = ViewBindings.findChildViewById(rootView, id);
      if (bookmarkTitleLayout == null) {
        break missingId;
      }

      id = R.id.content_frame;
      FrameLayout contentFrame = ViewBindings.findChildViewById(rootView, id);
      if (contentFrame == null) {
        break missingId;
      }

      CoordinatorLayout coordinatorLayout = (CoordinatorLayout) rootView;

      id = R.id.desktop_tabs_list;
      RecyclerView desktopTabsList = ViewBindings.findChildViewById(rootView, id);
      if (desktopTabsList == null) {
        break missingId;
      }

      id = R.id.drawer_layout;
      DrawerLayout drawerLayout = ViewBindings.findChildViewById(rootView, id);
      if (drawerLayout == null) {
        break missingId;
      }

      id = R.id.drawer_tabs_list;
      RecyclerView drawerTabsList = ViewBindings.findChildViewById(rootView, id);
      if (drawerTabsList == null) {
        break missingId;
      }

      id = R.id.find_bar;
      LinearLayout findBar = ViewBindings.findChildViewById(rootView, id);
      if (findBar == null) {
        break missingId;
      }

      id = R.id.find_next;
      ImageButton findNext = ViewBindings.findChildViewById(rootView, id);
      if (findNext == null) {
        break missingId;
      }

      id = R.id.find_previous;
      ImageButton findPrevious = ViewBindings.findChildViewById(rootView, id);
      if (findPrevious == null) {
        break missingId;
      }

      id = R.id.find_query;
      TextView findQuery = ViewBindings.findChildViewById(rootView, id);
      if (findQuery == null) {
        break missingId;
      }

      id = R.id.find_quit;
      ImageButton findQuit = ViewBindings.findChildViewById(rootView, id);
      if (findQuit == null) {
        break missingId;
      }

      id = R.id.home_button;
      FrameLayout homeButton = ViewBindings.findChildViewById(rootView, id);
      if (homeButton == null) {
        break missingId;
      }

      id = R.id.home_image_view;
      ImageView homeImageView = ViewBindings.findChildViewById(rootView, id);
      if (homeImageView == null) {
        break missingId;
      }

      id = R.id.new_tab_button;
      ImageView newTabButton = ViewBindings.findChildViewById(rootView, id);
      if (newTabButton == null) {
        break missingId;
      }

      id = R.id.progress_view;
      AnimatedProgressBar progressView = ViewBindings.findChildViewById(rootView, id);
      if (progressView == null) {
        break missingId;
      }

      id = R.id.search;
      SearchView search = ViewBindings.findChildViewById(rootView, id);
      if (search == null) {
        break missingId;
      }

      id = R.id.search_container;
      ConstraintLayout searchContainer = ViewBindings.findChildViewById(rootView, id);
      if (searchContainer == null) {
        break missingId;
      }

      id = R.id.search_refresh;
      ImageView searchRefresh = ViewBindings.findChildViewById(rootView, id);
      if (searchRefresh == null) {
        break missingId;
      }

      id = R.id.search_ssl_status;
      ImageView searchSslStatus = ViewBindings.findChildViewById(rootView, id);
      if (searchSslStatus == null) {
        break missingId;
      }

      id = R.id.tab_count_view;
      TabCountView tabCountView = ViewBindings.findChildViewById(rootView, id);
      if (tabCountView == null) {
        break missingId;
      }

      id = R.id.tab_drawer;
      LinearLayout tabDrawer = ViewBindings.findChildViewById(rootView, id);
      if (tabDrawer == null) {
        break missingId;
      }

      id = R.id.tab_header_button;
      ImageView tabHeaderButton = ViewBindings.findChildViewById(rootView, id);
      if (tabHeaderButton == null) {
        break missingId;
      }

      id = R.id.toolbar;
      Toolbar toolbar = ViewBindings.findChildViewById(rootView, id);
      if (toolbar == null) {
        break missingId;
      }

      id = R.id.toolbar_layout;
      ConstraintLayout toolbarLayout = ViewBindings.findChildViewById(rootView, id);
      if (toolbarLayout == null) {
        break missingId;
      }

      id = R.id.ui_layout;
      LinearLayout uiLayout = ViewBindings.findChildViewById(rootView, id);
      if (uiLayout == null) {
        break missingId;
      }

      return new BrowserActivityBinding((CoordinatorLayout) rootView, actionAddBookmark, actionBack,
          actionForward, actionHome, actionPageTools, actionReading, bookmarkBackButton,
          bookmarkDrawer, bookmarkListView, bookmarkTitleLayout, contentFrame, coordinatorLayout,
          desktopTabsList, drawerLayout, drawerTabsList, findBar, findNext, findPrevious, findQuery,
          findQuit, homeButton, homeImageView, newTabButton, progressView, search, searchContainer,
          searchRefresh, searchSslStatus, tabCountView, tabDrawer, tabHeaderButton, toolbar,
          toolbarLayout, uiLayout);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
