// Generated by view binder compiler. Do not edit!
package com.aaronjwood.portauthority.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.Spinner;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import com.aaronjwood.portauthority.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityDnsBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final TextView dnsAnswer;

  @NonNull
  public final LinearLayout dnsInput;

  @NonNull
  public final Button dnsLookup;

  @NonNull
  public final EditText domainName;

  @NonNull
  public final Spinner recordSpinner;

  private ActivityDnsBinding(@NonNull RelativeLayout rootView, @NonNull TextView dnsAnswer,
      @NonNull LinearLayout dnsInput, @NonNull Button dnsLookup, @NonNull EditText domainName,
      @NonNull Spinner recordSpinner) {
    this.rootView = rootView;
    this.dnsAnswer = dnsAnswer;
    this.dnsInput = dnsInput;
    this.dnsLookup = dnsLookup;
    this.domainName = domainName;
    this.recordSpinner = recordSpinner;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityDnsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityDnsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_dns, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityDnsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.dnsAnswer;
      TextView dnsAnswer = rootView.findViewById(id);
      if (dnsAnswer == null) {
        break missingId;
      }

      id = R.id.dnsInput;
      LinearLayout dnsInput = rootView.findViewById(id);
      if (dnsInput == null) {
        break missingId;
      }

      id = R.id.dnsLookup;
      Button dnsLookup = rootView.findViewById(id);
      if (dnsLookup == null) {
        break missingId;
      }

      id = R.id.domainName;
      EditText domainName = rootView.findViewById(id);
      if (domainName == null) {
        break missingId;
      }

      id = R.id.recordSpinner;
      Spinner recordSpinner = rootView.findViewById(id);
      if (recordSpinner == null) {
        break missingId;
      }

      return new ActivityDnsBinding((RelativeLayout) rootView, dnsAnswer, dnsInput, dnsLookup,
          domainName, recordSpinner);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
