// Generated by view binder compiler. Do not edit!
package com.aaronjwood.portauthority.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ListView;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import com.aaronjwood.portauthority.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityLanhostBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final TextView hostMac;

  @NonNull
  public final TextView hostMacLabel;

  @NonNull
  public final TextView hostMacVendor;

  @NonNull
  public final TextView hostMacVendorLabel;

  @NonNull
  public final TextView hostName;

  @NonNull
  public final TextView ipAddress;

  @NonNull
  public final TextView ipAddressLabel;

  @NonNull
  public final View ipAddressSeparator;

  @NonNull
  public final View macAddressSeparator;

  @NonNull
  public final View macVendorSeparator;

  @NonNull
  public final ListView portList;

  @NonNull
  public final TextView portListLabel;

  @NonNull
  public final Button scanPortRange;

  @NonNull
  public final Button scanWellKnownPorts;

  @NonNull
  public final Button wakeOnLan;

  private ActivityLanhostBinding(@NonNull RelativeLayout rootView, @NonNull TextView hostMac,
      @NonNull TextView hostMacLabel, @NonNull TextView hostMacVendor,
      @NonNull TextView hostMacVendorLabel, @NonNull TextView hostName, @NonNull TextView ipAddress,
      @NonNull TextView ipAddressLabel, @NonNull View ipAddressSeparator,
      @NonNull View macAddressSeparator, @NonNull View macVendorSeparator,
      @NonNull ListView portList, @NonNull TextView portListLabel, @NonNull Button scanPortRange,
      @NonNull Button scanWellKnownPorts, @NonNull Button wakeOnLan) {
    this.rootView = rootView;
    this.hostMac = hostMac;
    this.hostMacLabel = hostMacLabel;
    this.hostMacVendor = hostMacVendor;
    this.hostMacVendorLabel = hostMacVendorLabel;
    this.hostName = hostName;
    this.ipAddress = ipAddress;
    this.ipAddressLabel = ipAddressLabel;
    this.ipAddressSeparator = ipAddressSeparator;
    this.macAddressSeparator = macAddressSeparator;
    this.macVendorSeparator = macVendorSeparator;
    this.portList = portList;
    this.portListLabel = portListLabel;
    this.scanPortRange = scanPortRange;
    this.scanWellKnownPorts = scanWellKnownPorts;
    this.wakeOnLan = wakeOnLan;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityLanhostBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityLanhostBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_lanhost, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityLanhostBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.hostMac;
      TextView hostMac = rootView.findViewById(id);
      if (hostMac == null) {
        break missingId;
      }

      id = R.id.hostMacLabel;
      TextView hostMacLabel = rootView.findViewById(id);
      if (hostMacLabel == null) {
        break missingId;
      }

      id = R.id.hostMacVendor;
      TextView hostMacVendor = rootView.findViewById(id);
      if (hostMacVendor == null) {
        break missingId;
      }

      id = R.id.hostMacVendorLabel;
      TextView hostMacVendorLabel = rootView.findViewById(id);
      if (hostMacVendorLabel == null) {
        break missingId;
      }

      id = R.id.hostName;
      TextView hostName = rootView.findViewById(id);
      if (hostName == null) {
        break missingId;
      }

      id = R.id.ipAddress;
      TextView ipAddress = rootView.findViewById(id);
      if (ipAddress == null) {
        break missingId;
      }

      id = R.id.ipAddressLabel;
      TextView ipAddressLabel = rootView.findViewById(id);
      if (ipAddressLabel == null) {
        break missingId;
      }

      id = R.id.ipAddressSeparator;
      View ipAddressSeparator = rootView.findViewById(id);
      if (ipAddressSeparator == null) {
        break missingId;
      }

      id = R.id.macAddressSeparator;
      View macAddressSeparator = rootView.findViewById(id);
      if (macAddressSeparator == null) {
        break missingId;
      }

      id = R.id.macVendorSeparator;
      View macVendorSeparator = rootView.findViewById(id);
      if (macVendorSeparator == null) {
        break missingId;
      }

      id = R.id.portList;
      ListView portList = rootView.findViewById(id);
      if (portList == null) {
        break missingId;
      }

      id = R.id.portListLabel;
      TextView portListLabel = rootView.findViewById(id);
      if (portListLabel == null) {
        break missingId;
      }

      id = R.id.scanPortRange;
      Button scanPortRange = rootView.findViewById(id);
      if (scanPortRange == null) {
        break missingId;
      }

      id = R.id.scanWellKnownPorts;
      Button scanWellKnownPorts = rootView.findViewById(id);
      if (scanWellKnownPorts == null) {
        break missingId;
      }

      id = R.id.wakeOnLan;
      Button wakeOnLan = rootView.findViewById(id);
      if (wakeOnLan == null) {
        break missingId;
      }

      return new ActivityLanhostBinding((RelativeLayout) rootView, hostMac, hostMacLabel,
          hostMacVendor, hostMacVendorLabel, hostName, ipAddress, ipAddressLabel,
          ipAddressSeparator, macAddressSeparator, macVendorSeparator, portList, portListLabel,
          scanPortRange, scanWellKnownPorts, wakeOnLan);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
