/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

ext.rotEnabled = false

apply plugin: 'com.android.application'
apply plugin: "pmd"

pmd {
    toolVersion = '6.0.0'
    consoleOutput = true
}

task pmdMain(type: Pmd) {
    dependsOn 'assembleDebug'
    ruleSets = ['category/java/performance.xml']
    source 'src/main/java'
    include '**/*.java'
}
android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    namespace 'info.zamojski.soft.towercollector'

    defaultConfig {
        applicationId "info.zamojski.soft.towercollector"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 2140100
        versionName "2.14.1"

        vectorDrawables.useSupportLibrary = true

        // Build
        buildConfigField "long", "BUILD_DATE_TIME", "${new Date().getTime()}"
        buildConfigField "int", "MIN_SDK_VERSION", "${minSdkVersion.apiLevel}"
    }
    signingConfigs {
        official {
            keyAlias ''
            storeFile null
            storePassword ''
            keyPassword ''
        }
        fdroid {
            keyAlias ''
            storeFile null
            storePassword ''
            keyPassword ''
        }
    }
    flavorDimensions "environment", "market"
    productFlavors {
        develop {
            versionNameSuffix '-dev'
            dimension "environment"
        }
        production {
            dimension "environment"
        }
        official {
            dimension "market"
            buildConfigField "String", "MARKET_NAME", '"Official"'

            def props = getCustomProperties("official")
            def signFile = file(props['sign_storeFile'])
            assert signFile.exists()

            signingConfigs.official.storeFile signFile
            signingConfigs.official.storePassword props['sign_storePassword']
            signingConfigs.official.keyAlias props['sign_keyAlias']
            signingConfigs.official.keyPassword props['sign_keyPassword']

            setBuildConfigFieldsFromProps(props)
        }
        fdroid {
            dimension "market"
            buildConfigField "String", "MARKET_NAME", '"F-Droid"'

            def props = getCustomProperties("fdroid")
            def signFile = file(props['sign_storeFile'])
            assert signFile.exists()

            signingConfigs.fdroid.storeFile signFile
            signingConfigs.fdroid.storePassword props['sign_storePassword']
            signingConfigs.fdroid.keyAlias props['sign_keyAlias']
            signingConfigs.fdroid.keyPassword props['sign_keyPassword']

            setBuildConfigFieldsFromProps(props)
        }
    }
    buildTypes {
        debug {
            versionNameSuffix "-debug"
        }
        release {
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            minifyEnabled true
            shrinkResources true
            debuggable false
            zipAlignEnabled true
            productFlavors.official.signingConfig signingConfigs.official
            productFlavors.fdroid.signingConfig signingConfigs.fdroid
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    lint {
        disable 'MissingTranslation'
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
        unitTests.all {

            testLogging {
                events "passed", "skipped", "failed", "standardOut", "standardError"
            }


        }
    }
}

def acraVersion = '5.8.4'
def permissionsDispatcherVersion = '4.9.2'

dependencies {
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.legacy:legacy-support-v13:1.0.0'
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'androidx.core:core:1.6.0'
    implementation 'androidx.preference:preference:1.1.1'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.work:work-runtime:2.6.0'
    testImplementation 'junit:junit:4.12'
    testImplementation 'androidx.test:core:1.4.0'
    testImplementation 'org.robolectric:robolectric:4.7.2'
    officialImplementation 'com.google.firebase:firebase-analytics:21.0.0'
    implementation 'org.greenrobot:eventbus:3.3.1'
    implementation "ch.acra:acra-http:$acraVersion"
    implementation "ch.acra:acra-notification:$acraVersion"
    implementation "ch.acra:acra-limiter:$acraVersion"
    implementation 'org.sufficientlysecure:html-textview:4.0'
    implementation 'com.squareup.okhttp3:okhttp:4.10.0'
    implementation "com.github.permissions-dispatcher:permissionsdispatcher:$permissionsDispatcherVersion"
    annotationProcessor "com.github.permissions-dispatcher:permissionsdispatcher-processor:$permissionsDispatcherVersion"
    implementation 'com.jakewharton.timber:timber:5.0.1'
    implementation 'org.osmdroid:osmdroid-android:6.1.13'
    implementation 'com.github.MKergall:osmbonuspack:6.9.0'
    implementation 'app.netmonster:core:1.1.0'
}

Properties getCustomProperties(String currentFlavor) {
    def propsFile = rootProject.file("app/properties/private-${currentFlavor}.properties")
    if (!propsFile.exists()) {
        propsFile = rootProject.file("app/properties/private.properties")
        if (!propsFile.exists()) {
            propsFile = rootProject.file("app/properties/example.properties")
        }
    }
    if (propsFile.exists()) {
        println "Loading private custom properties configuration from: $propsFile"
        def props = new Properties()
        props.load(new FileInputStream(propsFile))
        rotEnabled = props['other_decode']
        return props
    }
    return null
}

def setBuildConfigFieldsFromProps(Properties props) {
    // ACRA
    android.defaultConfig.buildConfigField "boolean", "ACRA_SEND_REPORTS_IN_DEV_MODE", props['acra_sendReportsInDevMode']
    android.defaultConfig.buildConfigField "boolean", "ACRA_SETTINGS_AVAILABLE", props['acra_settings_available']
    android.defaultConfig.buildConfigField "String", "ACRA_FORM_URI", props['acra_formUri']
    android.defaultConfig.buildConfigField "String", "ACRA_HTTP_METHOD", props['acra_httpMethod']
    android.defaultConfig.buildConfigField "String", "ACRA_REPORT_TYPE", props['acra_reportType']
    android.defaultConfig.buildConfigField "String", "ACRA_FORM_URI_BASIC_AUTH_LOGIN", rot135(props['acra_formUriBasicAuthLogin'])
    android.defaultConfig.buildConfigField "String", "ACRA_FORM_URI_BASIC_AUTH_PASSWORD", rotHex(props['acra_formUriBasicAuthPassword'])
    // Analytics
    android.defaultConfig.buildConfigField "boolean", "ANALYTICS_AVAILABLE", props['analytics_available']
    // MLS
    android.defaultConfig.buildConfigField "String", "MLS_API_KEY", rotHex(props['mls_apiKey'])
    // OCID
    android.defaultConfig.buildConfigField "String", "OCID_API_KEY", rotHex(props['ocid_apiKey'])
    // Other
    android.defaultConfig.buildConfigField "String", "UPDATE_CHECK_FEED_URI", props['other_updateCheckFeedUri']
    android.defaultConfig.buildConfigField "String", "CONTACT_EMAIL", rot135(props['other_contactEmail'])
}

String rot135(String s) {
    if (!rotEnabled) {
        println 'Rot disabled'
        return s
    }
    StringBuilder sb = new StringBuilder()
    for (int i = 0; i < s.length(); i++) {
        int num = s[i]
        if ((num >= 97 && num <= 109) || (num >= 65 && num <= 77)) {
            num += 13
        } else if ((num >= 110 && num <= 122) || (num >= 78 && num <= 90)) {
            num -= 13
        } else if (num >= 48 && num <= 52) {
            num += 5
        } else if (num >= 53 && num <= 57) {
            num -= 5
        }
        sb.append((char) num)
    }
    return sb.toString()
}

String rotHex(String s) {
    if (!rotEnabled) {
        println 'Rot disabled'
        return s
    }
    StringBuilder sb = new StringBuilder()
    for (int i = 0; i < s.length(); i++) {
        int num = s[i]
        if ((num >= 97 && num <= 99) || (num >= 65 && num <= 67)) {
            num += 3
        } else if ((num >= 100 && num <= 102) || (num >= 68 && num <= 70)) {
            num -= 3
        } else if (num >= 48 && num <= 52) {
            num += 5
        } else if (num >= 53 && num <= 57) {
            num -= 5
        }
        sb.append((char) num)
    }
    return sb.toString()
}

apply plugin: 'com.google.gms.google-services'

afterEvaluate {
    tasks.matching { it.name.contains("GoogleServices") && !it.name.contains("Official") }*.enabled = false
    println "Google Services plugin enabled for: " + tasks.matching { it.name.contains("GoogleServices") && it.enabled }*.name
}
