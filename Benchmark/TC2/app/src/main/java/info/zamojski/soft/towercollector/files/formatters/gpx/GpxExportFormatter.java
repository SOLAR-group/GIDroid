/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

package info.zamojski.soft.towercollector.files.formatters.gpx;

import info.zamojski.soft.towercollector.files.formatters.gpx.model.HeaderData;
import info.zamojski.soft.towercollector.model.Measurement;
import info.zamojski.soft.towercollector.providers.GeneralCellUtils;
import info.zamojski.soft.towercollector.providers.ICellUtils;
import info.zamojski.soft.towercollector.utils.ApkUtils;
import org.stockchart.utils.DoubleUtils;

import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;

public class GpxExportFormatter implements IGpxFormatter {

    private static final Locale LOCALE = Locale.ENGLISH;

    private static final NumberFormat coordsDoubleFormater;
    private static final NumberFormat gpsDoubleFormater;
    private static final SimpleDateFormat exportDateFormater;

    private static final ICellUtils cellUtils;

    static {
        coordsDoubleFormater = NumberFormat.getNumberInstance(LOCALE);
        coordsDoubleFormater.setGroupingUsed(false);
        coordsDoubleFormater.setMinimumFractionDigits(8);
        coordsDoubleFormater.setMaximumFractionDigits(12);

        gpsDoubleFormater = NumberFormat.getNumberInstance(LOCALE);
        gpsDoubleFormater.setGroupingUsed(false);
        gpsDoubleFormater.setMinimumFractionDigits(0);
        gpsDoubleFormater.setMaximumFractionDigits(2);

        exportDateFormater = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'", Locale.ENGLISH);
        exportDateFormater.setTimeZone(TimeZone.getTimeZone("UTC"));

        cellUtils = new GeneralCellUtils();
    }

    @Override
    public String formatHeader(HeaderData h) {
        String headerString = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n";
        headerString += String.format("<gpx version=\"1.1\" creator=\"Tower Collector %s\" xmlns=\"http://www.topografix.com/GPX/1/1\" xmlns:gpxtpx=\"http://www.garmin.com/xmlschemas/TrackPointExtension/v2\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.topografix.com/GPX/1/1 http://www.topografix.com/GPX/1/1/gpx.xsd http://www.garmin.com/xmlschemas/TrackPointExtension/v2 http://www.garmin.com/xmlschemas/TrackPointExtensionv2.xsd\">\r\n",
                h.ApkVersion);
        headerString += "  <metadata>\r\n";
        String trackName = String.format("Sessions taken between %s and %s",
                formatDate(h.FirstMeasurementTimestamp),
                formatDate(h.LastMeasurementTimestamp));
        headerString += String.format("    <name>%s</name>\r\n",
                trackName);
        headerString += String.format("    <desc>File generated by Tower Collector %s on %s</desc>\r\n", h.ApkVersion, ApkUtils.getDeviceName());
        headerString += String.format("    <time>%s</time>\r\n",
                formatDate(System.currentTimeMillis()));
        headerString += String.format("    <bounds minlat=\"%s\" minlon=\"%s\" maxlat=\"%s\" maxlon=\"%s\" />\r\n",
                formatCoordinate(h.Boundaries.getMinLat()),
                formatCoordinate(h.Boundaries.getMinLon()),
                formatCoordinate(h.Boundaries.getMaxLat()),
                formatCoordinate(h.Boundaries.getMaxLon()));
        headerString += "  </metadata>\r\n";
        headerString += "  <trk>\r\n";
        headerString += String.format("    <name>%s</name>\r\n",
                trackName);
        headerString += "    <trkseg>\r\n";
        return headerString;
    }

    @Override
    public String formatRow(Measurement m) {
        StringBuilder sb = new StringBuilder();

        // begin trackpoint
        sb.append(String.format("      <trkpt lat=\"%s\" lon=\"%s\">\r\n", formatCoordinate(m.getLatitude()), formatCoordinate(m.getLongitude())));

        //set standard properties
        boolean altitudeAvailable = !DoubleUtils.equals(m.getGpsAltitude(), Measurement.GPS_VALUE_NOT_AVAILABLE);
        if (altitudeAvailable) {
            sb.append(String.format("        <ele>%s</ele>\r\n", formatGpsValue(m.getGpsAltitude())));
        }
        sb.append(String.format("        <time>%s</time>\r\n", formatDate(m.getTimestamp())));
        int mcc = m.getMcc();
        sb.append(String.format("        <name><![CDATA[%sMNC %d, LAC %d, CID %d, Signal strength %s dBm, Network %s, GPS accuracy %s m%s]]></name>\r\n",
                (mcc != Measurement.UNKNOWN_CID ? String.format("MCC %d, ", mcc) : ""),
                m.getMnc(),
                m.getLac(),
                m.getCid(),
                formatDbmSignal(m.getDbm()),
                cellUtils.getSystemType(m.getNetworkType()),
                formatGpsValue(m.getGpsAccuracy()),
                m.isNeighboring() ? ", neighboring" : ""));

        // set extended properties
        boolean speedAvailable = DoubleUtils.greaterThan(m.getGpsSpeed(), Measurement.GPS_VALUE_NOT_AVAILABLE);
        boolean bearingAvailable = DoubleUtils.greaterThan(m.getGpsBearing(), Measurement.GPS_VALUE_NOT_AVAILABLE);
        if (speedAvailable || bearingAvailable) {
            sb.append("        <extensions>\r\n"
                    + "          <gpxtpx:TrackPointExtension>\r\n");
            if (speedAvailable)
                sb.append(String.format("            <gpxtpx:speed>%s</gpxtpx:speed>\r\n",
                        formatGpsValue(m.getGpsSpeed())));
            if (bearingAvailable)
                sb.append(String.format("            <gpxtpx:bearing>%s</gpxtpx:bearing>\r\n",
                        formatGpsValue(m.getGpsBearing())));
            sb.append("          </gpxtpx:TrackPointExtension>\r\n"
                    + "        </extensions>\r\n");
        }

        // end trackpoint
        sb.append("      </trkpt>\r\n");

        return sb.toString();
    }

    @Override
    public String formatNewSegment() {
        return "    </trkseg>\r\n"
                + "    <trkseg>\r\n";
    }

    @Override
    public String formatFooter() {
        return "    </trkseg>\r\n"
                + "  </trk>\r\n"
                + "</gpx>";
    }

    private String formatCoordinate(double value) {
        return coordsDoubleFormater.format(value);
    }

    private String formatGpsValue(double value) {
        return gpsDoubleFormater.format(value);
    }

    private String formatDbmSignal(int dbm) {
        if (dbm != Measurement.UNKNOWN_SIGNAL)
            return String.valueOf(dbm);
        else
            return "";
    }

    private String formatDate(long timestamp) {
        return exportDateFormater.format(new Date(timestamp));
    }
}
