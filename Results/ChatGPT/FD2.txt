To optimize the given class, here are some suggestions:

1. Use the `equals()` method for string comparisons: Instead of using `==` operator to compare strings (`curel == "version"`), use the `equals()` method (`curel.equals("version")`). The `==` operator compares references, not the actual string values.

2. Use a switch statement or a map for handling element names: Instead of using multiple if-else conditions to handle different element names (`curel == "version"`, `curel == "versioncode"`, etc.), consider using a switch statement or a map to handle them efficiently. This can make the code more readable and maintainable.

3. Use StringBuilder for string concatenation: In the `getIcon()` method, the string concatenation operation (`mserver + "/icons/" + app.icon`) is performed multiple times. It is more efficient to use a `StringBuilder` for concatenating strings in a loop to avoid unnecessary string object creation.

4. Improve exception handling: In the `getIcon()` method, the catch block is empty (`catch (Exception e) {}`). It is recommended to handle or log the exceptions appropriately to identify and fix any potential issues.

5. Consider using libraries for network operations: Instead of manually handling network operations (`URL` connection and reading bytes), consider using established libraries such as `OkHttp` or `HttpURLConnection` to simplify and optimize network requests.

6. Utilize asynchronous operations: Performing network operations synchronously in the current implementation may cause the application to freeze or become unresponsive. Consider using asynchronous operations (such as `AsyncTask`, `Coroutines`, or `RxJava`) to fetch the icon in the background without blocking the main thread.

7. Optimize file operations: In the `getIcon()` method, consider using buffered I/O streams (`BufferedInputStream`, `BufferedOutputStream`) when reading from and writing to files. This can improve the performance of reading and writing data.

8. Follow Java naming conventions: It is recommended to follow Java naming conventions, such as using lowercase for variables and camelCase for method names. For example, `curapp` can be renamed to `curApp`.

These suggestions should help optimize the given class. However, keep in mind that further optimization may depend on the specific requirements and context of your application.