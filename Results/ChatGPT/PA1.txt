To optimize the given class, `MainActivity`, you can consider the following optimizations:

1. Remove Unused Imports: Remove any unused imports to declutter the code and improve readability.

2. Reduce Object Instantiation: Avoid unnecessary object instantiation inside loops or frequently executed methods. Move object instantiation outside the loop or use a singleton pattern where appropriate.

3. Use ViewHolder Pattern: When working with `ListView` or `RecyclerView`, use the ViewHolder pattern to improve the performance of list item views.

4. Use AsyncTask or ThreadPoolExecutor for Background Tasks: For tasks such as database operations or network requests, consider using `AsyncTask` or `ThreadPoolExecutor` instead of executing them on the main thread. This will help prevent UI blocking and improve responsiveness.

5. Use RecyclerView instead of ListView: Consider using `RecyclerView` instead of `ListView` as it provides more flexibility and performance optimizations.

6. Optimize Database Operations: Analyze the database operations performed in the code and optimize them by using appropriate indexes, transactions, or batch operations to improve efficiency.

7. Implement Lazy Loading: If the list of hosts is large, consider implementing lazy loading or pagination to load and display the data in smaller chunks, improving the overall performance and reducing memory usage.

8. Use Loaders or ViewModel for Data Management: Consider using Android architecture components like Loaders or ViewModel to manage data and handle configuration changes efficiently.

9. Optimize Animations: Review the animation implementation and ensure that it is efficient. Consider using property animations or optimizing the animation code for better performance.

10. Use ButterKnife or View Binding: Utilize libraries like ButterKnife or View Binding to reduce the boilerplate code associated with view initialization and event handling.

11. Optimize UI Updates: Minimize unnecessary UI updates by only updating views when necessary. For example, update the UI only when there is a change in data or state.

12. Implement Parcelable instead of Serializable: If the `Host` class is passed between activities using Intents, consider implementing the `Parcelable` interface instead of `Serializable` for better performance.

13. Optimize Sorting: If the `sort` operation in the `onContextItemSelected` method is performed frequently or on a large list, consider using a more efficient sorting algorithm or pre-sort the list to avoid sorting on every click.

14. Avoid Excessive String Concatenation: Instead of concatenating multiple strings using the `+` operator, use `StringBuilder` or `String.format` for better performance.

15. Consider Using ViewModel for Configuration Changes: If the `MainActivity` undergoes configuration changes (e.g., screen rotation), consider using ViewModel to retain the data across these changes instead of relying solely on the saved instance state.

Remember to thoroughly test the code after implementing any optimizations to ensure the desired functionality is maintained and to measure the performance improvements.